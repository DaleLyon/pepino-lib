"use strict";
var StringHelper_1 = require("../../domain/helpers/StringHelper");
var _ = require('underscore');
var IllegalStepError_1 = require("./errors/IllegalStepError");
var Pepino;
(function (Pepino) {
    class NullCodeGenerationStrategy {
        generate(text) {
            return "//" + text;
        }
    }
    class CucumberStepFunctionGenerator {
        constructor(codeGenerationStrategies) {
            this._codeGenerators = codeGenerationStrategies;
        }
        generate(steps) {
            this.EnsureStepsOnlyHaveOneSegment(steps);
            return this.generateEntireFunction(steps);
        }
        EnsureStepsOnlyHaveOneSegment(steps) {
            var groups = _.unique(steps, (step) => {
                return step.segment;
            });
            if (groups.length > 1) {
                throw new IllegalStepError_1.IllegalStepError(groups[1].segment);
            }
        }
        generateEntireFunction(steps) {
            const tab = "\t";
            var stepSegmentText = _.first(steps).segment;
            var variables = StringHelper_1.StringHelper.extractTextInQuotes(stepSegmentText);
            var lines = [tab + this.generateFunctionSignature(stepSegmentText, variables)];
            _.each(steps, (step) => {
                var gen = _.find(this._codeGenerators, (g) => { return g.canGenerate(step.text); })
                    || new NullCodeGenerationStrategy();
                var generatedCode = gen.generate(step.text);
                lines.push(tab + tab + generatedCode);
            });
            lines.push(tab + "});");
            lines.push("");
            return lines.join('\n');
        }
        generateFunctionSignature(stepSegmentText, variables) {
            const anyString = "\"([^\"]*)\"";
            var args = _.map(variables, (v) => {
                return v.replace("$", "");
            }).join(", ");
            var doctoredText = stepSegmentText;
            variables.forEach((v) => {
                if (v.startsWith("$")) {
                    doctoredText = doctoredText.replace("\"" + v + "\"", anyString);
                }
            });
            return "this.defineStep(/^" + doctoredText + "$/, function(" + args + ") {";
        }
        ;
    }
    Pepino.CucumberStepFunctionGenerator = CucumberStepFunctionGenerator;
})(Pepino = exports.Pepino || (exports.Pepino = {}));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRvbWFpbi9zZXJ2aWNlcy9DdWN1bWJlclN0ZXBGdW5jdGlvbkdlbmVyYXRvci50cyJdLCJuYW1lcyI6WyJQZXBpbm8iLCJQZXBpbm8uTnVsbENvZGVHZW5lcmF0aW9uU3RyYXRlZ3kiLCJQZXBpbm8uTnVsbENvZGVHZW5lcmF0aW9uU3RyYXRlZ3kuZ2VuZXJhdGUiLCJQZXBpbm8uQ3VjdW1iZXJTdGVwRnVuY3Rpb25HZW5lcmF0b3IiLCJQZXBpbm8uQ3VjdW1iZXJTdGVwRnVuY3Rpb25HZW5lcmF0b3IuY29uc3RydWN0b3IiLCJQZXBpbm8uQ3VjdW1iZXJTdGVwRnVuY3Rpb25HZW5lcmF0b3IuZ2VuZXJhdGUiLCJQZXBpbm8uQ3VjdW1iZXJTdGVwRnVuY3Rpb25HZW5lcmF0b3IuRW5zdXJlU3RlcHNPbmx5SGF2ZU9uZVNlZ21lbnQiLCJQZXBpbm8uQ3VjdW1iZXJTdGVwRnVuY3Rpb25HZW5lcmF0b3IuZ2VuZXJhdGVFbnRpcmVGdW5jdGlvbiIsIlBlcGluby5DdWN1bWJlclN0ZXBGdW5jdGlvbkdlbmVyYXRvci5nZW5lcmF0ZUZ1bmN0aW9uU2lnbmF0dXJlIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7QUFJYiw2QkFBMkIsbUNBQW1DLENBQUMsQ0FBQTtBQUMvRCxJQUFZLENBQUMsV0FBTSxZQUFZLENBQUMsQ0FBQTtBQUNoQyxpQ0FBK0IsMkJBQTJCLENBQUMsQ0FBQTtBQUUzRCxJQUFjLE1BQU0sQ0FtRW5CO0FBbkVELFdBQWMsTUFBTSxFQUFDLENBQUM7SUFFbEJBO1FBQ0lDLFFBQVFBLENBQUNBLElBQVlBO1lBQ2pCQyxNQUFNQSxDQUFDQSxJQUFJQSxHQUFHQSxJQUFJQSxDQUFDQTtRQUN2QkEsQ0FBQ0E7SUFDTEQsQ0FBQ0E7SUFFREQ7UUFJSUcsWUFBWUEsd0JBQXdEQTtZQUNoRUMsSUFBSUEsQ0FBQ0EsZUFBZUEsR0FBR0Esd0JBQXdCQSxDQUFDQTtRQUNwREEsQ0FBQ0E7UUFFREQsUUFBUUEsQ0FBQ0EsS0FBa0JBO1lBQ3ZCRSxJQUFJQSxDQUFDQSw2QkFBNkJBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBO1lBQzFDQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxzQkFBc0JBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBO1FBQzlDQSxDQUFDQTtRQUVPRiw2QkFBNkJBLENBQUNBLEtBQWtCQTtZQUNwREcsSUFBSUEsTUFBTUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsS0FBS0EsRUFBRUEsQ0FBQ0EsSUFBSUE7Z0JBQzlCQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQTtZQUN4QkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDSEEsRUFBRUEsQ0FBQUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsTUFBTUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ25CQSxNQUFNQSxJQUFJQSxtQ0FBZ0JBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLENBQUNBLE9BQU9BLENBQUNBLENBQUNBO1lBQ2xEQSxDQUFDQTtRQUNMQSxDQUFDQTtRQUVPSCxzQkFBc0JBLENBQUNBLEtBQWtCQTtZQUM3Q0ksTUFBTUEsR0FBR0EsR0FBR0EsSUFBSUEsQ0FBQ0E7WUFFakJBLElBQUlBLGVBQWVBLEdBQUdBLENBQUNBLENBQUNBLEtBQUtBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBLE9BQU9BLENBQUNBO1lBQzdDQSxJQUFJQSxTQUFTQSxHQUFHQSwyQkFBWUEsQ0FBQ0EsbUJBQW1CQSxDQUFDQSxlQUFlQSxDQUFDQSxDQUFDQTtZQUNsRUEsSUFBSUEsS0FBS0EsR0FBR0EsQ0FBQ0EsR0FBR0EsR0FBR0EsSUFBSUEsQ0FBQ0EseUJBQXlCQSxDQUFDQSxlQUFlQSxFQUFFQSxTQUFTQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUUvRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsS0FBS0EsRUFBRUEsQ0FBQ0EsSUFBSUE7Z0JBQ2ZBLElBQUlBLEdBQUdBLEdBQUdBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLGVBQWVBLEVBQUVBLENBQUNBLENBQUNBLE9BQU9BLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLFdBQVdBLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLENBQUFBLENBQUNBLENBQUNBLENBQUNBO3VCQUMzRUEsSUFBSUEsMEJBQTBCQSxFQUFFQSxDQUFDQTtnQkFFeENBLElBQUlBLGFBQWFBLEdBQUdBLEdBQUdBLENBQUNBLFFBQVFBLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLENBQUNBO2dCQUM1Q0EsS0FBS0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsYUFBYUEsQ0FBQ0EsQ0FBQ0E7WUFFMUNBLENBQUNBLENBQUNBLENBQUNBO1lBRUhBLEtBQUtBLENBQUNBLElBQUlBLENBQUNBLEdBQUdBLEdBQUdBLEtBQUtBLENBQUNBLENBQUNBO1lBQ3hCQSxLQUFLQSxDQUFDQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQTtZQUVmQSxNQUFNQSxDQUFDQSxLQUFLQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtRQUM1QkEsQ0FBQ0E7UUFFT0oseUJBQXlCQSxDQUFDQSxlQUF1QkEsRUFBRUEsU0FBd0JBO1lBQy9FSyxNQUFNQSxTQUFTQSxHQUFXQSxjQUFjQSxDQUFDQTtZQUN6Q0EsSUFBSUEsSUFBSUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsU0FBU0EsRUFBRUEsQ0FBQ0EsQ0FBQ0E7Z0JBQzFCQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxPQUFPQSxDQUFDQSxHQUFHQSxFQUFFQSxFQUFFQSxDQUFDQSxDQUFDQTtZQUM5QkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7WUFDZEEsSUFBSUEsWUFBWUEsR0FBR0EsZUFBZUEsQ0FBQ0E7WUFDbkNBLFNBQVNBLENBQUNBLE9BQU9BLENBQUNBLENBQUNBLENBQUNBO2dCQUNoQkEsRUFBRUEsQ0FBQUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsVUFBVUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7b0JBQ25CQSxZQUFZQSxHQUFHQSxZQUFZQSxDQUFDQSxPQUFPQSxDQUFDQSxJQUFJQSxHQUFHQSxDQUFDQSxHQUFHQSxJQUFJQSxFQUFFQSxTQUFTQSxDQUFDQSxDQUFDQTtnQkFDcEVBLENBQUNBO1lBQ0xBLENBQUNBLENBQUNBLENBQUNBO1lBRUhBLE1BQU1BLENBQUNBLG9CQUFvQkEsR0FBR0EsWUFBWUEsR0FBR0EsZUFBZUEsR0FBR0EsSUFBSUEsR0FBR0EsS0FBS0EsQ0FBQ0E7UUFDaEZBLENBQUNBOztJQUNMTCxDQUFDQTtJQTFEWUgsb0NBQTZCQSxnQ0EwRHpDQSxDQUFBQTtBQUNMQSxDQUFDQSxFQW5FYSxNQUFNLEdBQU4sY0FBTSxLQUFOLGNBQU0sUUFtRW5CIiwiZmlsZSI6ImRvbWFpbi9zZXJ2aWNlcy9DdWN1bWJlclN0ZXBGdW5jdGlvbkdlbmVyYXRvci5qcyIsInNvdXJjZVJvb3QiOiIvc3JjIn0=
