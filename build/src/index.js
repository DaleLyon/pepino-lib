#!/usr/bin/env node
"use strict";
var glob = require('glob');
var fs = require("fs");
var program = require('commander');
var _ = require('underscore');
var Promise = require('bluebird');
var p = require('./domain/services/StepParser');
var s = require('./domain/services/CriteriaSegmentMatcher');
var f = require('./domain/services/FeatureParser');
var g = require('./domain/services/CucumberStepFunctionGenerator');
var fileGen = require('./domain/services/CommonJsCucumberStepFileGenerator');
var ClickElementStrategy_1 = require('./domain/codeGenerationStrategies/ClickElementStrategy');
var NavigateStrategy_1 = require('./domain/codeGenerationStrategies/NavigateStrategy');
var TypeTextWithElementStrategy_1 = require('./domain/codeGenerationStrategies/TypeTextWithElementStrategy');
var TypeTextWithoutElementStrategy_1 = require('./domain/codeGenerationStrategies/TypeTextWithoutElementStrategy');
var JasmineExpectStrategy_1 = require('./domain/jasmineExpectCodeGeneration/JasmineExpectStrategy');
var stepParser = new p.Pepino.PepinoLangStepParser();
var matcher = new s.Pepino.CriteriaSegmentMatcher();
var featureParser = new f.Pepino.GherkinFeatureParser();
var codeGenerator = new g.Pepino.CucumberStepFunctionGenerator(new Array(new ClickElementStrategy_1.ClickElementStrategy(), new NavigateStrategy_1.NavigateStrategy(), new TypeTextWithElementStrategy_1.TypeTextWithElementStrategy(), new TypeTextWithoutElementStrategy_1.TypeTextWithoutElementStrategy(), new JasmineExpectStrategy_1.JasmineExpectStrategy()));
var stepFileGenerator = new fileGen.Pepino.CommonJsCucumberStepFileGenerator();
function getMatchingSegmentTypes(segmentText, features) {
    var segments = matcher.get(segmentText, features);
    var matchingSegmentTypes = _.map(segments, (s) => {
        return s.type;
    });
    var uniqueSegmentTypes = _.unique(matchingSegmentTypes);
    return uniqueSegmentTypes;
}
;
function createOverwriteStepCodeFile(stepFilename, code) {
    var newFilename = stepFilename + ".js";
    fs.writeFileSync(newFilename, code);
}
function forEachTextFileIn(globPath, action) {
    return new Promise((resolve, reject) => {
        glob(globPath, {}, (err, files) => {
            var arr = new Array();
            _.each(files, (filename) => {
                try {
                    var fileContents = fs.readFileSync(filename, 'utf8');
                    arr.push(action(fileContents, filename));
                }
                catch (err) {
                    reject(err);
                }
            });
            resolve(arr);
        });
    });
}
class CodedStepFile {
    constructor(codedSteps, filename) {
        this.codedSteps = codedSteps;
        this.filename = filename;
    }
}
function getCodedSegents(features, segments) {
    return _.flatten(_.map(segments, (segment) => {
        var matchingSegmentTypes = getMatchingSegmentTypes(segment.text, features);
        var codeForStep = _.map(matchingSegmentTypes, (segmentType) => {
            return codeGenerator.generate(segmentType, segment.text, segment.steps);
        });
        return codeForStep;
    }));
}
function getCodedStepFile(steps, filename, features) {
    var stepGroups = _.groupBy(steps, (s) => {
        return s.segment;
    });
    var segments = _.map(Object.keys(stepGroups), (key) => {
        return {
            text: key,
            steps: stepGroups[key]
        };
    });
    var codedSegments = getCodedSegents(features, segments);
    return new CodedStepFile(codedSegments, filename);
}
function createStepCodeFilesForEachPepinoStepFile(glb, features) {
    return forEachTextFileIn(glb, (stepFileContents, filename) => {
        console.log(filename);
        var steps = stepParser.parse(stepFileContents);
        return getCodedStepFile(steps, filename, features);
    });
}
;
function getCacheOfFeatures(glb) {
    return forEachTextFileIn(glb, (featureFileContents, featureFilename) => {
        console.log(featureFilename);
        try {
            return featureParser.parse(featureFileContents);
        }
        catch (err) {
            if (typeof err === 'FeatureParserError') {
                console.log(err.message);
            }
            else {
                throw err;
            }
        }
    });
}
function writeCodeFiles(codeStepFiles) {
    _.each(codeStepFiles, (file) => {
        var commonJsFile = stepFileGenerator.generate(file.codedSteps);
        createOverwriteStepCodeFile(file.filename, commonJsFile);
    });
}
console.log("Pepino CLI");
program
    .option('-f, --features <glob>', 'Glob to feature files.')
    .option('-s, --steps <glob>', 'Glob to step files.')
    .parse(process.argv);
try {
    var features = program.features || "./features/**/*.feature";
    if (features.indexOf("/**/") === -1) {
        features = features + "/**/*.feature";
    }
    var steps = program.steps || features.replace(".feature", ".step");
    getCacheOfFeatures(features)
        .then((features) => {
        return createStepCodeFilesForEachPepinoStepFile(steps, features);
    })
        .then(writeCodeFiles);
}
catch (err) {
    console.log(err);
    program.help();
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sIm5hbWVzIjpbImdldE1hdGNoaW5nU2VnbWVudFR5cGVzIiwiY3JlYXRlT3ZlcndyaXRlU3RlcENvZGVGaWxlIiwiZm9yRWFjaFRleHRGaWxlSW4iLCJDb2RlZFN0ZXBGaWxlIiwiQ29kZWRTdGVwRmlsZS5jb25zdHJ1Y3RvciIsImdldENvZGVkU2VnZW50cyIsImdldENvZGVkU3RlcEZpbGUiLCJjcmVhdGVTdGVwQ29kZUZpbGVzRm9yRWFjaFBlcGlub1N0ZXBGaWxlIiwiZ2V0Q2FjaGVPZkZlYXR1cmVzIiwid3JpdGVDb2RlRmlsZXMiXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQztBQUNiLElBQUksSUFBSSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUMzQixJQUFJLEVBQUUsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDdkIsSUFBSSxPQUFPLEdBQUcsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBRW5DLElBQVksQ0FBQyxXQUFNLFlBQVksQ0FBQyxDQUFBO0FBQ2hDLElBQVksT0FBTyxXQUFNLFVBQVUsQ0FBQyxDQUFBO0FBQ3BDLElBQVksQ0FBQyxXQUFNLDhCQUE4QixDQUFDLENBQUE7QUFDbEQsSUFBWSxDQUFDLFdBQU0sMENBQTBDLENBQUMsQ0FBQTtBQUM5RCxJQUFZLENBQUMsV0FBTSxpQ0FBaUMsQ0FBQyxDQUFBO0FBQ3JELElBQVksQ0FBQyxXQUFNLGlEQUFpRCxDQUFDLENBQUE7QUFDckUsSUFBWSxPQUFPLFdBQU0scURBQXFELENBQUMsQ0FBQTtBQU0vRSxxQ0FBbUMsd0RBQXdELENBQUMsQ0FBQTtBQUM1RixpQ0FBK0Isb0RBQW9ELENBQUMsQ0FBQTtBQUNwRiw0Q0FBMEMsK0RBQStELENBQUMsQ0FBQTtBQUMxRywrQ0FBNkMsa0VBQWtFLENBQUMsQ0FBQTtBQUNoSCxzQ0FBb0MsNERBQTRELENBQUMsQ0FBQTtBQUlqRyxJQUFJLFVBQVUsR0FBRyxJQUFJLENBQUMsQ0FBQyxNQUFN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QUdBLENBQUNBO1lBQ2RBLENBQUNBO1FBQ0xBLENBQUNBO0lBQ0xBLENBQUNBLENBQUNBLENBQUFBO0FBQ05BLENBQUNBO0FBRUQsd0JBQXdCLGFBQW1DO0lBQ3ZEQyxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxhQUFhQSxFQUFFQSxDQUFDQSxJQUFJQTtRQUN2QkEsSUFBSUEsWUFBWUEsR0FBR0EsaUJBQWlCQSxDQUFDQSxRQUFRQSxDQUFDQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSxDQUFDQTtRQUMvREEsMkJBQTJCQSxDQUFDQSxJQUFJQSxDQUFDQSxRQUFRQSxFQUFFQSxZQUFZQSxDQUFDQSxDQUFDQTtJQUM3REEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7QUFDUEEsQ0FBQ0E7QUFFRCxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBRTFCLE9BQU87S0FDSixNQUFNLENBQUMsdUJBQXVCLEVBQUUsd0JBQXdCLENBQUM7S0FDekQsTUFBTSxDQUFDLG9CQUFvQixFQUFFLHFCQUFxQixDQUFDO0tBQ25ELEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7QUFFdkIsSUFBRyxDQUFDO0lBRUEsSUFBSSxRQUFRLEdBQUcsT0FBTyxDQUFDLFFBQVEsSUFBSSx5QkFBeUIsQ0FBQztJQUM3RCxFQUFFLENBQUEsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQztRQUNoQyxRQUFRLEdBQUcsUUFBUSxHQUFHLGVBQWUsQ0FBQztJQUMxQyxDQUFDO0lBRUQsSUFBSSxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssSUFBSSxRQUFRLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUVuRSxrQkFBa0IsQ0FBQyxRQUFRLENBQUM7U0FDdkIsSUFBSSxDQUFDLENBQUMsUUFBUTtRQUNYLE1BQU0sQ0FBQyx3Q0FBd0MsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDckUsQ0FBQyxDQUFDO1NBQ0QsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBRTlCLENBQ0E7QUFBQSxLQUFLLENBQUEsQ0FBQyxHQUFHLENBQUMsQ0FBQSxDQUFDO0lBRVAsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNqQixPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7QUFFbkIsQ0FBQyIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZVJvb3QiOiIvc3JjIn0=
